
7SegmentDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c4  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a8  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018b  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{	
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char seg_code[]={0x3f,0x06,0x5b,0x4f, 0x66,0x6d, 0x7d,0x07,0xff,0x6f};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	DDRD = 0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xff;
  ac:	87 bb       	out	0x17, r24	; 23
	PORTD = seg_code[0];
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	82 bb       	out	0x12, r24	; 18
	PORTB = seg_code[0];
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	42 e5       	ldi	r20, 0x52	; 82
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x44>
  c6:	00 00       	nop
  c8:	9e 01       	movw	r18, r28
  ca:	25 5f       	subi	r18, 0xF5	; 245
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
	{
		int i = 0; 
		for (i = 0; i<=9; i++)
		{
			
 			PORTB = seg_code[i];
  d2:	8d 91       	ld	r24, X+
  d4:	88 bb       	out	0x18, r24	; 24
 			
			 PORTD = seg_code[0];
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	82 bb       	out	0x12, r24	; 18
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	42 e5       	ldi	r20, 0x52	; 82
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	91 50       	subi	r25, 0x01	; 1
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x5e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x68>
  ea:	00 00       	nop
  ec:	fe 01       	movw	r30, r28
  ee:	32 96       	adiw	r30, 0x02	; 2
			for (int j = 1; j <= 9; j++)
			{
 				
			
				
					PORTD = seg_code[j];
  f0:	81 91       	ld	r24, Z+
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	42 e5       	ldi	r20, 0x52	; 82
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x78>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x82>
 104:	00 00       	nop
 			PORTB = seg_code[i];
 			
			 PORTD = seg_code[0];
			 _delay_ms(300);
			
			for (int j = 1; j <= 9; j++)
 106:	e2 17       	cp	r30, r18
 108:	f3 07       	cpc	r31, r19
 10a:	91 f7       	brne	.-28     	; 0xf0 <main+0x6e>
	PORTB = seg_code[0];
	_delay_ms(300);		
	while(1)
	{
		int i = 0; 
		for (i = 0; i<=9; i++)
 10c:	a2 17       	cp	r26, r18
 10e:	b3 07       	cpc	r27, r19
 110:	01 f7       	brne	.-64     	; 0xd2 <main+0x50>
 112:	dd cf       	rjmp	.-70     	; 0xce <main+0x4c>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
